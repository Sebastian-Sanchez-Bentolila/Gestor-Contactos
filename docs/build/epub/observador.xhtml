<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>Patrón Observador</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css?v=8e8a900e" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css?v=1d6d279e" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="patron-observador">
<h1>Patrón Observador</h1>
<p>El patrón Observador es un diseño de software que define una relación uno a muchos entre objetos. En este patrón, un objeto, llamado sujeto, mantiene una lista de suscriptores, llamados observadores, y notifica automáticamente a los observadores sobre cualquier cambio en su estado, generalmente mediante la llamada a uno de sus métodos. Este patrón es útil en situaciones donde hay una dependencia entre objetos, y se desea que los cambios en un objeto se reflejen automáticamente en otros.</p>
<p>En el contexto de nuestro proyecto, el patrón Observador se utiliza para notificar a los clientes (observadores) sobre cambios en la lista de contactos mantenida por el servidor (sujeto). Cuando se agrega, elimina o modifica un contacto en el servidor, este notifica a todos los clientes conectados sobre el cambio para que puedan actualizar su vista correspondiente.</p>
<p>El funcionamiento del patrón Observador en nuestro proyecto se puede resumir en los siguientes pasos:</p>
<ol class="arabic simple">
<li><p><strong>Sujeto (Servidor)</strong>: El servidor mantiene una lista de observadores (clientes) interesados en los cambios en la lista de contactos.</p></li>
<li><p><strong>Registro de Observadores</strong>: Los clientes se registran como observadores del servidor cuando se conectan al sistema.</p></li>
<li><p><strong>Notificación de Cambios</strong>: Cuando se realiza un cambio en la lista de contactos en el servidor, este notifica automáticamente a todos los clientes registrados sobre el cambio.</p></li>
<li><p><strong>Actualización de los Observadores</strong>: Los clientes reciben la notificación del servidor y actualizan su interfaz de usuario para reflejar los cambios en la lista de contactos.</p></li>
</ol>
<p>El código relacionado con la implementación del patrón Observador se encuentra en el archivos <cite>observador.py</cite>. A continuación, se muestra una vista general del código:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="linenos"> 1</span><span class="c1"># Alumno : Sebastian Sanchez Bentolila </span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="c1"># Clase Observador - Aplicación {gestor de contactos}</span>
<span class="linenos"> 4</span>
<span class="linenos"> 5</span><span class="c1"># Librerías</span>
<span class="linenos"> 6</span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="linenos"> 7</span>
<span class="linenos"> 8</span><span class="c1"># Clases</span>
<span class="linenos"> 9</span><span class="k">class</span> <span class="nc">Observador</span><span class="p">:</span>
<span class="linenos">10</span>    <span class="c1"># Observador</span>
<span class="linenos">11</span>    <span class="k">def</span> <span class="nf">actualizar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mensaje</span><span class="p">):</span>
<span class="linenos">12</span>        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s2">&quot;Subclases de Observador&quot;</span><span class="p">)</span>
<span class="linenos">13</span>
<span class="linenos">14</span><span class="k">class</span> <span class="nc">ObservadorRegistro</span><span class="p">(</span><span class="n">Observador</span><span class="p">):</span>
<span class="linenos">15</span>    <span class="c1"># Observador para registrar eventos registro_log.txt</span>
<span class="linenos">16</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">archivo_registro</span><span class="p">):</span>
<span class="linenos">17</span>        <span class="bp">self</span><span class="o">.</span><span class="n">archivo_registro</span> <span class="o">=</span> <span class="n">archivo_registro</span>
<span class="linenos">18</span>
<span class="linenos">19</span>    <span class="k">def</span> <span class="nf">actualizar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mensaje</span><span class="p">):</span>
<span class="linenos">20</span>        <span class="c1"># Guardar el mensaje en el archivo de registro con la fecha y hora actual</span>
<span class="linenos">21</span>        <span class="n">timestamp</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-</span><span class="si">%d</span><span class="s2"> %H:%M:%S&quot;</span><span class="p">)</span>
<span class="linenos">22</span>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">archivo_registro</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
<span class="linenos">23</span>            <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">timestamp</span><span class="si">}</span><span class="s2"> - </span><span class="si">{</span><span class="n">mensaje</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>El código anterior muestra la implementación básica del patrón Observador en Python, donde el <cite>Sujeto</cite> (<cite>Servidor</cite> en nuestro caso) mantiene una lista de <cite>Observadores</cite> (clientes) y notifica a cada observador cuando se producen cambios.</p>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>