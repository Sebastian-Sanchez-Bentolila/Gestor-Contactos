Arquitectura de Red (Cliente-Servidor)
**************************************

La arquitectura de red Cliente-Servidor es un modelo de comunicación
en el que un cliente realiza solicitudes a un servidor y el servidor
proporciona respuestas a esas solicitudes. En el contexto de este
proyecto, el servidor actúa como un punto centralizado que gestiona
las solicitudes de los clientes y coordina la comunicación entre
ellos.


Servidor
========

El **Servidor** es el componente central de la arquitectura de red. Es
responsable de escuchar las solicitudes de los clientes, procesarlas y
enviar respuestas adecuadas. En este proyecto, el servidor utiliza
sockets para establecer conexiones con los clientes y gestionar la
comunicación entre ellos.

El código relacionado con el Servidor se encuentra en el archivo
*servidor.py*. Este archivo contiene las clases y funciones que
definen el comportamiento del servidor, incluida la lógica para
aceptar conexiones entrantes y manejar solicitudes de clientes.

   # Alumno : Sebastian Sanchez Bentolila

   # Servidor - Aplicación {gestor de contactos}

   # Librerías 
   import socket
   import threading
   import sys

   # Clases
   class Servidor:
       # Servidor con socket
       
       # Atributos
       def __init__(self, host, port, observador):
           self.host = host
           self.port = port
           self.socket_servidor = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
           self.socket_servidor.bind((self.host, self.port))
           self.clientes_conectados = []
           self.observador = observador

       # Métodos 
       def iniciar(self):
           try:
               self.socket_servidor.listen()
               self.observador.actualizar(f"Servidor iniciado en {self.host}:{self.port}")

               while True:
                   cliente, direccion = self.socket_servidor.accept()
                   self.observador.actualizar(f"Cliente conectado desde {direccion}")
                   self.clientes_conectados.append(cliente)

                   # Iniciar un hilo para manejar la comunicación con el cliente
                   hilo_cliente = threading.Thread(target=self.atender_cliente, args=(cliente,))
                   hilo_cliente.start()
           except Exception as e:
               print(f"Error al iniciar el servidor: {e}")
               sys.exit(1)

       def atender_cliente(self, cliente):
           try:
               while True:
                   datos = cliente.recv(1024)
                   if not datos:
                       break
                   mensaje = datos.decode('utf-8')
                   self.observador.actualizar(f"Mensaje recibido: {mensaje}")
           except Exception as e:
               self.observador.actualizar(f"Error al atender cliente: {e}")
           finally:
               cliente.close()
               self.clientes_conectados.remove(cliente)

       def detener(self):
           try:
               self.socket_servidor.close()
               self.observador.actualizar("Servidor detenido")
           except Exception as e:
               print(f"Error al detener el servidor: {e}")
               sys.exit(1)      


Cliente
=======

El **Cliente** es el componente que realiza solicitudes al servidor y
recibe respuestas. Cada instancia del cliente se conecta al servidor a
través de un socket y envía mensajes para solicitar información o
realizar acciones específicas.

El código relacionado con el Cliente se encuentra en el archivo
*cliente.py*. Este archivo contiene las clases y funciones que definen
el comportamiento del cliente, incluida la lógica para establecer
conexiones con el servidor y enviar solicitudes.

   # Alumno : Sebastian Sanchez Bentolila

   # Cliente - Aplicación {gestor de contactos}

   # Librerías
   import socket
   import sys

   # Clases 
   class Cliente:
       # Cliente 
     
       # Atributos 
       def __init__(self, host, port):
           self.host = host
           self.port = port
           self.socket_cliente = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
           self.conectar()

       # Métodos
       def conectar(self):
           try:
               self.socket_cliente.connect((self.host, self.port))
               print("Conexión establecida con el servidor.")
           except Exception as e:
               print(f"Error al conectar con el servidor: {e}")
               sys.exit(1)

       def enviar_mensaje(self, mensaje):
           try:
               self.socket_cliente.sendall(mensaje.encode('utf-8'))
               print("Mensaje enviado al servidor.")
           except Exception as e:
               print(f"Error al enviar mensaje al servidor: {e}")
               
       def recibir_mensaje(self):
           try:
               datos = self.socket_cliente.recv(1024)
               mensaje_recibido = datos.decode('utf-8')
               print(f"Mensaje recibido del servidor: {mensaje_recibido}")
           except Exception as e:
               print(f"Error al recibir mensaje del servidor: {e}")

       def cerrar_conexion(self):
           try:
               self.socket_cliente.close()
               print("Conexión cerrada correctamente.")
           except Exception as e:
               print(f"Error al cerrar la conexión: {e}")
